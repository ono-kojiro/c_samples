%{
#include <string.h>
#include <termios.h>
#include "baudrate.h"
%}

/*
	%struct-type
	make use of the user-defined 'struct'
 */
%struct-type

/*
	'-c'
	%compare-strncmp
	the STR argument does not need to be NUL terminated.
 */

/*
	'-l'
	%compare-lengths
	the hash table performs binary comparison.
 */

/*
	'-N'
	%define lookup-function-name in_word_set
	change default lookup function name
 */
%define lookup-function-name get_baudrate_set

/*
	'-H'
	%define hash-function-name declaration
	change default hash name
 */
%define hash-function-name baudrate_hash

/*
	'--constants-prefix'
	%define constants-prefix userdata
	add prefix to the constants data
 */
%define constants-prefix BAUDRATE_

/*
	'-G'
	%global-table
	
 */
%global-table

/*
	'-W'
	%define word-array-name declaration
 */
%define word-array-name baudrate_wordlist
%define slot-name name
%define initializer-suffix ,0,0
%enum

%omit-struct-type
struct _BAUDRATE;
%%
0,  0, B0
50, 50, B50
75, 75, B75
110, 110, B110
134, 134, B134
150, 150, B150
200, 200, B200
300, 300, B300
600, 600, B600
1200, 1200, B1200
1800, 1800, B1800
2400, 2400, B2400
4800, 4800, B4800
9600, 9600, B9600
19200, 19200, B19200
38400, 38400, B38400
57600, 57600, B57600
115200, 115200, B115200
230400, 230400, B230400
%%

BAUDRATE *get_baudrate_wordlist(int id)
{
	return &baudrate_wordlist[id];
}

int get_baudrate_flag(const char *str)
{
	int flag = -1;
	BAUDRATE *p = get_baudrate_set(str, strlen(str));
	if(p){
		flag = p->flag;
	}
	return flag;
}

